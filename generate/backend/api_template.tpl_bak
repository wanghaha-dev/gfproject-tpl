package {{.PackageName}}

import (
	"gfproject/utils"
	"github.com/wanghaha-dev/gf/frame/g"
	"github.com/wanghaha-dev/gf/net/ghttp"
	"github.com/wanghaha-dev/gf/util/guid"
)

var {{.StructNameUpper}} = new({{.StructName}})

type {{.StructName}} struct{}

// List 获取数据列表
func (*{{.StructName}}) List(r *ghttp.Request) {
	page, limit := utils.GetPageArgs(r)

	total, err := g.DB("{{.DBName}}").Model("{{.TableName}}").Count()
	utils.GetErrExit(r, err)

	result, err := g.DB("{{.DBName}}").Model("{{.TableName}}").
		Offset((page - 1) * limit).
		Limit(limit).
		FindAll()
	utils.GetErrExit(r, err)

	utils.RespOkWithPageData(r, result, total)
}

// All 获取所有数据不分页
func (*{{.StructName}}) All(r *ghttp.Request) {
	result, err := g.DB("{{.DBName}}").Model("{{.TableName}}").
		FindAll()
	utils.GetErrExit(r, err)

	utils.RespOkWithData(r, result)
}

// Add 新增数据
func (*{{.StructName}}) Add(r *ghttp.Request) {
	params := r.GetMap()
	params["id"] = guid.S()

	rules, ruleErr := utils.GetAddFieldsRule("{{.TableName}}")
	utils.GetErrWithMsgExit(r, ruleErr, ruleErr.Error())

	checkErr := g.Validator().Rules(rules).CheckMap(params)
	if checkErr != nil {
		utils.RespFailWithMsg(r, checkErr.FirstString())
	}

	_, insertErr := g.DB("{{.DBName}}").Model("{{.TableName}}").
		Insert(params)
	utils.GetErrExit(r, insertErr)

	utils.RespOk(r)
}

// DetailById 根据Id获取数据详细信息
func (*{{.StructName}}) DetailById(r *ghttp.Request) {
	record, err := g.DB("{{.DBName}}").Model("{{.TableName}}").
		Where("id=?", r.GetString("id")).
		FindOne()
	utils.GetErrExit(r, err)

	utils.RespOkWithData(r, record)
}

// DeleteById 根据Id删除数据
func (*{{.StructName}}) DeleteById(r *ghttp.Request) {
	_, err := g.DB("{{.DBName}}").Model("{{.TableName}}").
		Where("id=?", r.GetString("id")).
		Delete()
	utils.GetErrExit(r, err)

	utils.RespOk(r)
}

// UpdateById 根据id修改数据
func (*{{.StructName}}) UpdateById(r *ghttp.Request) {
	// 新数据
	params := r.GetMap()

	rules, ruleErr := utils.GetUpdateFieldsRule("{{.TableName}}")
	utils.GetErrWithMsgExit(r, ruleErr, ruleErr.Error())

	checkErr := g.Validator().Rules(rules).CheckMap(params)
	if checkErr != nil {
		utils.RespFailWithMsg(r, checkErr.FirstString())
	}

	_, updateErr := g.DB("{{.DBName}}").Model("{{.TableName}}").
		Where("id=?", r.GetString("id")).
		Update(params)
	utils.GetErrExit(r, updateErr)

	utils.RespOk(r)
}

// Index 首页
func (*{{.StructName}}) Index(r *ghttp.Request) {
    // todo
	utils.RespOkWithData(r, "hello {{.StructName}}")
}
